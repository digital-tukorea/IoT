안녕하세요 ２번쨰 파일입니다。
#include <Arduino.h>
#include <WiFi.h>
#include <PubSubClient.h>

// 핀 설정
#define DUST_SENSOR_LED_PIN 26   // 먼지 센서 LED 제어 핀
#define DUST_SENSOR_AOUT_PIN 34  // 먼지 센서 ADC 핀
#define RELAY_PIN 25             // 릴레이 제어 핀

// WiFi 설정
const char* WIFI_SSID = "1team";
const char* WIFI_PASS = "qwer1234";

// MQTT 설정
const char* MQTT_BROKER = "34.64.79.139";
const int MQTT_PORT = 1883;
const char* MQTT_TOPIC_DUST = "sensor/dust";
const char* MQTT_TOPIC_FAN  = "/control/fan";

// 센서 관련 상수
const float VCC = 3.3;
const int ADC_MAX = 4095;

WiFiClient espClient;
PubSubClient client(espClient);

// 먼지 농도 임계값
int dustThreshold = 75;

// 함수 선언
void connectWiFi();
void connectMQTT();
void callback(char* topic, byte* payload, unsigned int length);
int readDustSensor();

void setup() {
  Serial.begin(115200);

  pinMode(DUST_SENSOR_LED_PIN, OUTPUT);
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(DUST_SENSOR_LED_PIN, LOW);
  digitalWrite(RELAY_PIN, LOW);

  connectWiFi();
  client.setServer(MQTT_BROKER, MQTT_PORT);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    connectMQTT();
  }
  client.loop();

  int dustValue = readDustSensor();
  float voltage = dustValue * (VCC / ADC_MAX);
  float dustDensity = (voltage - 0.9) * 1000 / 5.0;
  if (dustDensity < 0) dustDensity = 0;

  Serial.printf("Dust: %.2f µg/m³\n", dustDensity);

  // MQTT 발행
  char payload[50];
  snprintf(payload, sizeof(payload), "%.2f", dustDensity);
  client.publish(MQTT_TOPIC_DUST, payload);

  // 팬 자동 제어
  if (dustDensity > dustThreshold) {
    digitalWrite(RELAY_PIN, HIGH);
  } else {
    digitalWrite(RELAY_PIN, LOW);
  }

  delay(2000);
}

// ===== 함수 구현 =====
void connectWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi Connected!");
}

void connectMQTT() {
  while (!client.connected()) {
    Serial.print("Connecting to MQTT...");
    if (client.connect("ESP32Client")) {
      Serial.println("Connected!");
      client.subscribe(MQTT_TOPIC_FAN);
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      delay(2000);
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  String msg;
  for (unsigned int i = 0; i < length; i++) {
    msg += (char)payload[i];
  }
  msg.trim();
  if (String(topic) == MQTT_TOPIC_FAN) {
    if (msg == "ON") {
      digitalWrite(RELAY_PIN, HIGH);
    } else if (msg == "OFF") {
      digitalWrite(RELAY_PIN, LOW);
    }
  }
}

int readDustSensor() {
  digitalWrite(DUST_SENSOR_LED_PIN, LOW);
  delayMicroseconds(280);
  int value = analogRead(DUST_SENSOR_AOUT_PIN);
  delayMicroseconds(40);
  digitalWrite(DUST_SENSOR_LED_PIN, HIGH);
  delayMicroseconds(9680);
  return value;
}
